name: Build + Test

on:
  - push
  - pull_request

jobs:

  rustfmt:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: cargo-${{ hashFiles('**/Cargo.toml') }}
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly-2022-03-13
        override: true
        components: rustfmt
    - uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --all -- --check

  test:
    runs-on: ubuntu-20.04

    steps:
    - name: "Free up disk space"
      run: sudo rm -rf /usr/share/dotnet && sudo rm -rf /opt/ghc && sudo rm -rf "/usr/local/share/boost" && sudo rm -rf "$AGENT_TOOLSDIRECTORY"
    - uses: actions/checkout@v3
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: cargo-${{ hashFiles('**/Cargo.toml') }}
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly-2022-03-13
        override: true
        components: llvm-tools-preview
    - name: Install cargo-llvm-cov
      uses: actions-rs/cargo@v1
      with:
        command: install
        args: cargo-llvm-cov
    - name: Remove possible stale artifacts
      uses: actions-rs/cargo@v1
      with:
        command: llvm-cov
        args: clean --workspace
    - name: Run test with coverage instrumentation
      uses: actions-rs/cargo@v1
      with:
        command: llvm-cov
        args: --all-features
    - name: Generate coverage report
      uses: actions-rs/cargo@v1
      with:
        command: llvm-cov
        args: --no-run --lcov --output-path coverage.lcov
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        files: coverage.lcov
        fail_ci_if_error: false
        flags: unittests
        name: Nimiq code coverage
        verbose: true

  clippy:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: cargo-${{ hashFiles('**/Cargo.toml') }}
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly-2022-03-13
        override: true
        components: clippy
    - uses: actions-rs/clippy-check@v1
      with:
        name: Clippy Report
        token: ${{ secrets.GITHUB_TOKEN }}
        args: --release --all-features

  reconnect-test:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v3
    - uses: BSFishy/pip-action@v1
      with:
        packages: |
          sh
    - uses: actions/cache@v2
      with:
        path:
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: cargo-${{ hashFiles('**/Cargo.toml') }}
    - name: Set up Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly-2022-03-13
        override: true
    - uses: actions-rs/cargo@v1
      with:
        command: build
    - name: Executes the 4 validators reconnecting scenario
      run: |
          bash scripts/devnet/devnet.sh -r 1
    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v2
      with:
          name: reconnect-test-logs
          path: |
            temp-logs/
