name: Devnet Scenarios

on:
  schedule:
    - cron: '0 */2 * * *'
  workflow_dispatch:
    default: "default"

jobs:
  Run:
    strategy:
      fail-fast: false
      matrix:
        test:
        - FourValidatorsReconnect
        - MultipleValidatorsDown
        - FourValidatorsReconnectRmDatabase
        - FourValidatorsReconnectSpammer
        - MacroBlockProduction
        - Validators90sDown
        - LowViewChangeDelay
        include:
        - test: FourValidatorsReconnect
          devnet_args:
        - test: MultipleValidatorsDown
          devnet_args: -k 2
        - test: FourValidatorsReconnectRmDatabase
          devnet_args: -d
        - test: FourValidatorsReconnectSpammer
          devnet_args: -s 500
        - test: MacroBlockProduction
          pre: "sed -i 's/BLOCKS_PER_BATCH: u32 = 32;/BLOCKS_PER_BATCH: u32 = 2;/g' primitives/src/policy.rs"
          devnet_args: -k 0 -s 150
        - test: Validators90sDown
          devnet_args: -s 500 -t 90
        - test: LowViewChangeDelay
          pre: "sed -i 's/VIEW_CHANGE_DELAY: Duration = Duration::from_secs(10);/VIEW_CHANGE_DELAY: Duration = Duration::from_secs(2);/g' validator/src/validator.rs"
          devnet_args: -k 0 -s 150

    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v3
    - uses: actions/cache@v3
      with:
        path:
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: cargo-${{ hashFiles('**/Cargo.toml') }}
    - name: Set up Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    - name: Optionally patch the source
      run: ${{ matrix.pre }}
    - uses: actions-rs/cargo@v1
      with:
        command: build
    - name: Executes the test
      run: |          
          bash scripts/devnet/devnet.sh ${{ matrix.devnet_args }}
    - name: Archive test results
      if: always()
      uses: actions/upload-artifact@v2
      with:
          name: ${{ matrix.test }}-logs
          path: |
            temp-logs/
    - name: Retrieve failure reason
      if: always()
      run: |
          if [ -f temp-state/RESULT.TXT ]; then
            echo "::set-output name=FAIL_REASON::$(cat temp-state/RESULT.TXT)"
          else
            echo "::set-output name=FAIL_REASON::other"
          fi
      id: reason
    - name: Report potential deadlocks to slack
      if: always() && contains(steps.reason.outputs.FAIL_REASON, 'DEADLOCK')
      uses: ravsamhq/notify-slack-action@v1
      with:
          status: ${{ job.status }}
          notification_title: 'Potential deadlock detected in ${{ matrix.test }}'
          footer: '<{run_url}|View Run>'
      env:
          SLACK_WEBHOOK_URL: ${{ secrets.ACTION_MONITORING_SLACK }}
    - name: Report long lock hold times
      if: always() && contains(steps.reason.outputs.FAIL_REASON, 'LONG_LOCK_HOLD_TIME')
      uses: ravsamhq/notify-slack-action@v1
      with:
          status: ${{ job.status }}
          notification_title: 'Long lock hold time in ${{ matrix.test }}'
          footer: '<{run_url}|View Run>'
      env:
          SLACK_WEBHOOK_URL: ${{ secrets.ACTION_MONITORING_SLACK }}
    - name: Report slow lock acquisitions
      if: always() && contains(steps.reason.outputs.FAIL_REASON, 'SLOW_LOCK_ACQUISITION')
      uses: ravsamhq/notify-slack-action@v1
      with:
          status: ${{ job.status }}
          notification_title: 'Slow lock acquisition detected in ${{ matrix.test }}'
          footer: '<{run_url}|View Run>'
      env:
          SLACK_WEBHOOK_URL: ${{ secrets.ACTION_MONITORING_SLACK }}
    - name: Report Status to Slack
      if: always() && github.ref == 'refs/heads/albatross'
      uses: ravsamhq/notify-slack-action@v1
      with:
          status: ${{ job.status }}
          notify_when: 'failure'
          notification_title: '${{ matrix.test }} failed because of ${{ steps.reason.outputs.FAIL_REASON }}'
          footer: '<{run_url}|View Run>'
      env:
          SLACK_WEBHOOK_URL: ${{ secrets.ACTION_MONITORING_SLACK }}
