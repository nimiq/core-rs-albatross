language: rust

# See travis-ci/travis-ci#9061
sudo: required

# Cache cargo for faster build
cache: cargo

# Dependencies of kcov, used by coverage
addons:
  apt:
    packages:
      - libcurl4-openssl-dev
      - libelf-dev
      - libdw-dev
      - binutils-dev
      - cmake # also required for cargo-update
    sources:
      - kalakris-cmake

# run builds for all the trains (and more)
rust:
  # - stable
  # - beta
  - nightly

matrix:
  # allow_failures:
    # - rust: stable
    # - rust: beta
  fast_finish: true

# Splitting the jobs is necessary due to timeouts, however we have to make sure that we include all crates
env:
  - TEST_CRATES="-p nimiq-macros -p fixed-unsigned -p nimiq-build-tools -p nimiq-tools -p nimiq-utils -p nimiq-collections -p nimiq-primitives -p nimiq-account -p nimiq-block -p nimiq-block-albatross -p nimiq-block-base -p nimiq-transaction -p nimiq-transaction-builder"
  - TEST_CRATES="-p beserial -p beserial_derive"
  - TEST_CRATES="-p nimiq-database"
  - TEST_CRATES="-p nimiq-hash -p nimiq-hash_derive -p nimiq-keys -p nimiq-key-derivation -p nimiq-mnemonic -p nimiq-vrf -p nimiq-bls -p nimiq-nano-sync"
  - TEST_CRATES="-p nimiq-accounts -p nimiq-tree-primitives -p nimiq-blockchain -p nimiq-blockchain-albatross -p nimiq-blockchain-base -p nimiq-block-production -p nimiq-block-production-albatross -p nimiq-consensus -p nimiq-mempool"
  - TEST_CRATES="-p nimiq-handel -p nimiq-messages -p nimiq-metrics-server -p nimiq-network -p nimiq-genesis -p nimiq-rpc-server -p nimiq-validator -p nimiq-ws-rpc-server"
  - TEST_CRATES="-p nimiq-wallet -p nimiq-peer-address -p nimiq-subscription -p nimiq-lib -p nimiq-client"
  - RUN_CLIPPY=1
  - RUN_FMT=1

before_script:
  - export PATH=$HOME/.cargo/bin:$PATH
  # add componnent rustfmt when RUN_FMT is set. If that fails, downgrade nightly toolchain to one which has rustfmt support
  - if [[ -n ${RUN_FMT:+x} ]]; then rustup component add rustfmt || rustup uninstall nightly && rustup toolchain install nightly -c rustfmt; fi
  # add componnent clippy when RUN_CLIPPY is set. If that fails, downgrade nightly toolchain to one which has clippy support
  - if [[ -n ${RUN_CLIPPY:+x} ]]; then rustup component add clippy || rustup uninstall nightly && rustup toolchain install nightly -c clippy; fi
  - cargo install cargo-update || echo "cargo-update already installed"
  - cargo install cargo-travis || echo "cargo-travis already installed"
  - cargo install-update -a # update outdated cached binaries
#  - pip install --user python-coveralls


script:
  - if [[ -n ${RUN_FMT:+x} ]] && [[ -z ${NO_FMT+x} ]]; then cargo fmt -- --check; fi
  - if [[ -n ${RUN_CLIPPY:+x} ]] && [[ -z ${NO_CLIPPY+x} ]]; then cargo clippy --all-features; fi
  - if [[ -n ${TEST_CRATES:+x} ]]; then echo $TEST_CRATES; fi
  - if [[ -n ${TEST_CRATES:+x} ]]; then travis_wait 60 cargo test --release --verbose --all-features $TEST_CRATES; fi

# Don't cache registry as it accumulates dead weight as dependencies are updated
# Also downloading this from crates.io is probably faster as downloading from travis cache
before_cache:
  - rm -rf "$TRAVIS_HOME/.cargo/registry/src"
  - rm -rf $HOME/.cargo/registry

# temporarily disabled, plan is to move to codecov
#after_success:
# measure code coverage and upload to coveralls.io
#  - cargo coveralls --exclude-pattern /libargon2-sys,/tests,/beserial -p nimiq
#  - coveralls --merge=target/kcov/merged-kcov-output/coveralls.out
